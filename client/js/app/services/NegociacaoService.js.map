{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","get","then","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","console","log","erro","Error","Promise","all","_obterNegociacoesDaSemana","_obterNegociacoesDaSemanaAnterior","_obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","negociacao","ConnectionFactory","getConnection","NegociacaoDao","conexao","dao","adiciona","connection","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEqual","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\n  constructor() {\n    this._http = new HttpService();\n  }\n\n  _obterNegociacoesDaSemana() {\n    return this._http\n      .get('negociacoes/semana')\n      .then(negociacoes => {\n        return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n      })\n      .catch(erro => {\n        console.log(erro);\n        throw new Error('Não foi possível obter as negociações da semana');\n      })\n  }\n\n  _obterNegociacoesDaSemanaAnterior() {\n    return this._http\n      .get('negociacoes/anterior')\n      .then(negociacoes => {\n        return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n      })\n      .catch(erro => {\n        console.log(erro);\n        throw new Error('Não foi possível obter as negociações da semana anterior');\n      })\n  }\n\n  _obterNegociacoesDaSemanaRetrasada() {\n    return this._http\n      .get('negociacoes/retrasada')\n      .then(negociacoes => {\n        return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n      })\n      .catch(erro => {\n        console.log(erro);\n        throw new Error('Não foi possível obter as negociações da semana retrasada');\n      })\n  }\n\n  obterNegociacoes() {\n    return Promise.all([\n      this._obterNegociacoesDaSemana(),\n      this._obterNegociacoesDaSemanaAnterior(),\n      this._obterNegociacoesDaSemanaRetrasada()\n    ]).then(periodos => {\n      let negociacoes = periodos\n        .reduce((dados, periodo) => dados.concat(periodo), []);\n      return negociacoes;\n    }).catch(erro => {\n      throw new Error(erro);\n    });\n  }\n\n  cadastra(negociacao) {\n    return ConnectionFactory\n      .getConnection()\n      .then(conexao => new NegociacaoDao(conexao))\n      .then(dao => dao.adiciona(negociacao))\n      .then(() => 'Negociação cadastrada com sucesso')\n      .catch(erro => {\n        console.log(erro);\n        throw new Error('Não foi possível adicionar a negociação')\n      });\n  }\n\n  lista() {\n    return ConnectionFactory\n      .getConnection()\n      .then(connection => new NegociacaoDao(connection))\n      .then(dao => dao.listaTodos())\n      .catch(erro => {\n        console.log(erro);\n        throw new Error('Não foi possível obter as negociações')\n      })\n  }\n\n  apaga() {\n    return ConnectionFactory\n      .getConnection()\n      .then(connection => new NegociacaoDao(connection))\n      .then(dao => dao.apagaTodos())\n      .then(() => 'Negociações apagadas com sucesso')\n      .catch(erro => {\n        console.log(erro);\n        throw new Error('Não foi possível apagar as negociações');\n      })\n  }\n\n  importa(listaAtual) {\n    return this.obterNegociacoes()\n      .then(negociacoes =>\n        negociacoes.filter(negociacao =>\n          !listaAtual.some(negociacaoExistente =>\n            negociacao.isEqual(negociacaoExistente)))\n      )\n      .catch(erro => {\n        console.log(erro);\n        throw new Error('Não foi possível importar as negociações');\n      })\n  }\n}\n"]}