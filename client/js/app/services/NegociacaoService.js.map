{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","get","then","negociacoes","map","Date","objeto","data","quantidade","valor","catch","console","log","erro","Error","Promise","all","_obterNegociacoesDaSemana","_obterNegociacoesDaSemanaAnterior","_obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","negociacao","getConnection","conexao","dao","adiciona","connection","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEqual","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import { HttpService } from './HttpService';\nimport { ConnectionFactory } from \"./ConnectionFactory\";\nimport { NegociacaoDao } from \"../dao/NegociacaoDao\";\nimport { Negociacao } from \"../models/Negociacao\";\n\nexport class NegociacaoService {\n  constructor() {\n    this._http = new HttpService();\n  }\n\n  _obterNegociacoesDaSemana() {\n    return this._http\n      .get('negociacoes/semana')\n      .then(negociacoes => {\n        return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n      })\n      .catch(erro => {\n        console.log(erro);\n        throw new Error('Não foi possível obter as negociações da semana');\n      })\n  }\n\n  _obterNegociacoesDaSemanaAnterior() {\n    return this._http\n      .get('negociacoes/anterior')\n      .then(negociacoes => {\n        return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n      })\n      .catch(erro => {\n        console.log(erro);\n        throw new Error('Não foi possível obter as negociações da semana anterior');\n      })\n  }\n\n  _obterNegociacoesDaSemanaRetrasada() {\n    return this._http\n      .get('negociacoes/retrasada')\n      .then(negociacoes => {\n        return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n      })\n      .catch(erro => {\n        console.log(erro);\n        throw new Error('Não foi possível obter as negociações da semana retrasada');\n      })\n  }\n\n  obterNegociacoes() {\n    return Promise.all([\n      this._obterNegociacoesDaSemana(),\n      this._obterNegociacoesDaSemanaAnterior(),\n      this._obterNegociacoesDaSemanaRetrasada()\n    ]).then(periodos => {\n      let negociacoes = periodos\n        .reduce((dados, periodo) => dados.concat(periodo), []);\n      return negociacoes;\n    }).catch(erro => {\n      throw new Error(erro);\n    });\n  }\n\n  cadastra(negociacao) {\n    return ConnectionFactory\n      .getConnection()\n      .then(conexao => new NegociacaoDao(conexao))\n      .then(dao => dao.adiciona(negociacao))\n      .then(() => 'Negociação cadastrada com sucesso')\n      .catch(erro => {\n        console.log(erro);\n        throw new Error('Não foi possível adicionar a negociação')\n      });\n  }\n\n  lista() {\n    return ConnectionFactory\n      .getConnection()\n      .then(connection => new NegociacaoDao(connection))\n      .then(dao => dao.listaTodos())\n      .catch(erro => {\n        console.log(erro);\n        throw new Error('Não foi possível obter as negociações')\n      })\n  }\n\n  apaga() {\n    return ConnectionFactory\n      .getConnection()\n      .then(connection => new NegociacaoDao(connection))\n      .then(dao => dao.apagaTodos())\n      .then(() => 'Negociações apagadas com sucesso')\n      .catch(erro => {\n        console.log(erro);\n        throw new Error('Não foi possível apagar as negociações');\n      })\n  }\n\n  importa(listaAtual) {\n    return this.obterNegociacoes()\n      .then(negociacoes =>\n        negociacoes.filter(negociacao =>\n          !listaAtual.some(negociacaoExistente =>\n            negociacao.isEqual(negociacaoExistente)))\n      )\n      .catch(erro => {\n        console.log(erro);\n        throw new Error('Não foi possível importar as negociações');\n      })\n  }\n}\n"]}