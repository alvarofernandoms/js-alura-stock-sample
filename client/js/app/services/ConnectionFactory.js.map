{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,Y,GAAS,CAAC,aAAD,C;AACbC,a,GAAU,C;AACVC,Y,GAAS,Y;AAEPC,gB,GAAa,I;AACfC,W,GAAQ,I;;mCAEGC,iB;AACX,qCAAc;AAAA;;AACZ,gBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;;;0CAEsB;AACrB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;AACAS,0BAAYI,eAAZ,GAA8B,aAAK;AACjCT,kCAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACD,eAFD;;AAIAR,0BAAYS,SAAZ,GAAwB,aAAK;AAC3B,oBAAI,CAAChB,UAAL,EAAiB;AACfA,+BAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,0BAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,6BAAWC,KAAX,GAAmB,YAAM;AACvB,0BAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACD,mBAFD;AAGD;AACDE,wBAAQL,UAAR;AACD,eATD;;AAWAO,0BAAYW,OAAZ,GAAsB,aAAK;AACzBC,wBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uBAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,eAHD;AAKD,aAtBM,CAAP;AAuBD;;;wCAEoBtB,U,EAAY;AAC/BH,mBAAO0B,OAAP,CAAe,iBAAS;AACtB,kBAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACE1B,WAAW2B,iBAAX,CAA6BD,KAA7B;AACF1B,yBAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACD,aAJD;AAKD;;;4CAEwB;AACvB,gBAAI7B,UAAJ,EAAgB;AACdC;AACAD,2BAAa,IAAb;AACD;AACF","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'],\n  version = 4,\n  dbName = 'aluraframe';\n\nlet connection = null,\n  close = null;\n\nexport class ConnectionFactory {\n  constructor() {\n    throw new Error('Não é possível criar instâncias de ConnectionFactory')\n  }\n\n  static getConnection() {\n    return new Promise((resolve, reject) => {\n      let openRequest = window.indexedDB.open(dbName, version);\n      openRequest.onupgradeneeded = e => {\n        ConnectionFactory._createStores(e.target.result);\n      };\n\n      openRequest.onsuccess = e => {\n        if (!connection) {\n          connection = e.target.result;\n          close = connection.close.bind(connection);\n          connection.close = () => {\n            throw new Error('Você não pode fechar diretamente a conexão');\n          }\n        }\n        resolve(connection);\n      };\n\n      openRequest.onerror = e => {\n        console.log(e.target.error);\n        reject(e.target.error.name);\n      };\n\n    });\n  }\n\n  static _createStores(connection) {\n    stores.forEach(store => {\n      if (connection.objectStoreNames.contains(store))\n        connection.deleteObjectStore(store);\n      connection.createObjectStore(store, { autoIncrement: true });\n    });\n  }\n\n  static closeConnection() {\n    if (connection) {\n      close();\n      connection = null;\n    }\n  }\n\n}\n"]}